{
  "active": false,
  "connections": {
    "Timer Ventana Ofertas (3min)": {
      "main": [
        [
          {
            "node": "Cerrar Ventana Ofertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Ofertas Recibidas": {
      "main": [
        [
          {
            "node": "Procesar Ofertas Ventana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Ofertas Ventana": {
      "main": [
        [
          {
            "node": "Algoritmo Selección",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cerrar Ventana Ofertas": {
      "main": [
        [
          {
            "node": "Buscar Ofertas Recibidas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Timer Ventana Ofertas (3min)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Algoritmo Selección": {
      "main": [
        [
          {
            "node": "Clasificar Domiciliarios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Resultado Ventana": {
      "main": [
        [
          {
            "node": "Confirmar Pedido Automático",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado Contraoferta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado Sin Ofertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clasificar Domiciliarios": {
      "main": [
        [
          {
            "node": "Notificar Otros Domiciliarios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Hay Domiciliarios No Participaron?": {
      "main": [
        [
          {
            "node": "Set No Participaron",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Hay Domiciliarios Rechazados?": {
      "main": [
        [
          {
            "node": "Set Rechazados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Estado Contraoferta": {
      "main": [
        [
          {
            "node": "Return Contraofertado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Estado Sin Ofertas": {
      "main": [
        [
          {
            "node": "Return Sin Ofertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notificar Otros Domiciliarios": {
      "main": [
        [
          {
            "node": "¿Hay Domiciliarios Rechazados?",
            "type": "main",
            "index": 0
          },
          {
            "node": "¿Hay Domiciliarios No Participaron?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch Resultado Ventana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Rechazados": {
      "main": [
        [
          {
            "node": "Notificar Domiciliario Rechazado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set No Participaron": {
      "main": [
        [
          {
            "node": "Notificar No Participaron",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmar Pedido Automático": {
      "main": [
        [
          {
            "node": "Notificar Domiciliario Asignado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notificar Domiciliario Rechazado": {
      "main": [
        [
          {
            "node": "Switch Resultado Ventana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notificar No Participaron": {
      "main": [
        [
          {
            "node": "Switch Resultado Ventana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notificar Domiciliario Asignado": {
      "main": [
        [
          {
            "node": "Return Aceptado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-10T02:35:56.502Z",
  "id": "J7IDbKTkclpin309",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "0004 Clientes Procesar Ventana Ofertas",
  "nodes": [
    {
      "parameters": {
        "amount": "={{ $json.tiempo_procesar_ofertas }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1920,
        368
      ],
      "id": "a41a0bb3-f84f-4b6b-aa98-fe86f82a7df3",
      "name": "Timer Ventana Ofertas (3min)",
      "webhookId": "b58a2432-b82c-4b1d-8be9-496cd9a2d9ea",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ofertas_recibidas",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "ventana_id",
              "condition": "eq",
              "keyValue": "={{ $('Start').item.json.ventana_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1472,
        368
      ],
      "id": "8f4f5456-bc27-48e8-9a3f-05b934ec82c2",
      "name": "Buscar Ofertas Recibidas",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "4bpjJPK2fqZkspgx",
          "name": "Supabase QA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Procesar Ofertas Ventana - OPTIMIZADO\nconst ventanaData = $('Start').first().json;\nconst ofertasRecibidas = $('Buscar Ofertas Recibidas').all(); // Ofertas de Supabase\n\n// Solo retornar los datos esenciales para el algoritmo\nreturn {\n  valor_oferta: ventanaData.valor_oferta,\n  ofertas_recibidas: ofertasRecibidas,\n  pedido_id: $('Start').first().json.pedido_id,\n  ventana_id: $('Start').first().json.ventana_id,\n  numero_completo: ventanaData.numero_completo\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        368
      ],
      "id": "b00dd1d7-3a79-4d00-a530-36ea43282a0d",
      "name": "Procesar Ofertas Ventana"
    },
    {
      "parameters": {
        "jsCode": "// Algoritmo de selección\nconst datos = $input.first().json;\nconst ofertasRecibidas = datos.ofertas_recibidas || [];\nconst ofertaOriginal = datos.valor_oferta;\n\nfunction seleccionarMejorOferta(ofertas, ofertaOriginal) {\n  if (!ofertas || ofertas.length === 0) {\n    return {\n      tiene_ofertas: false,\n      tipo_seleccion: 'sin_ofertas'\n    };\n  }\n\n  // Extraer los datos de la propiedad 'json' de cada oferta\n  const ofertasNormalizadas = ofertas.map(ofertaWrapper => {\n    const oferta = ofertaWrapper.json || ofertaWrapper;\n    return {\n      ...oferta,\n      valor_oferta: parseFloat(oferta.valor_oferta) || 0,\n      fecha_oferta: new Date(oferta.fecha_oferta)\n    };\n  });\n\n  // Separar aceptaciones y contraofertas válidas\n  const aceptaciones = ofertasNormalizadas.filter(o => \n    o.valor_oferta <= ofertaOriginal && o.tipo_oferta === 'aceptacion'\n  );\n  \n  const contraofertas = ofertasNormalizadas.filter(o => \n    o.valor_oferta > ofertaOriginal && o.tipo_oferta === 'contraoferta'\n  );\n\n  // Prioridad 1: Aceptaciones del precio original\n  if (aceptaciones.length > 0) {\n    // Ordenar por fecha de oferta (más antigua primero - primera oferta gana)\n    const mejorAceptacion = aceptaciones.sort((a, b) => \n      a.fecha_oferta - b.fecha_oferta\n    )[0];\n    \n    return {\n      tiene_ofertas: true,\n      mejor_oferta: mejorAceptacion,\n      tipo_seleccion: 'aceptacion',\n      valor_final: ofertaOriginal,\n      acepta_automatico: true\n    };\n  }\n\n  // Prioridad 2: Mejor contraoferta (precio más bajo, y en caso de empate, primera oferta)\n  if (contraofertas.length > 0) {\n    const mejorContraoferta = contraofertas.sort((a, b) => {\n      // Primer criterio: menor precio\n      if (a.valor_oferta !== b.valor_oferta) {\n        return a.valor_oferta - b.valor_oferta;\n      }\n      // Segundo criterio (desempate): fecha más antigua (primera oferta gana)\n      return a.fecha_oferta - b.fecha_oferta;\n    })[0];\n\n    return {\n      tiene_ofertas: true,\n      mejor_oferta: mejorContraoferta,\n      tipo_seleccion: 'contraoferta',\n      valor_final: mejorContraoferta.valor_oferta,\n      acepta_automatico: false\n    };\n  }\n\n  return {\n    tiene_ofertas: false,\n    tipo_seleccion: 'sin_ofertas'\n  };\n}\n\n// Ejecutar selección\nconst resultado = seleccionarMejorOferta(ofertasRecibidas, ofertaOriginal);\n\n// Estructurar la salida según el formato requerido\nif (resultado.tiene_ofertas && resultado.mejor_oferta) {\n  return {\n    pedido_id: datos.pedido_id,\n    ventana_id: datos.ventana_id,\n    oferta_id: resultado.mejor_oferta.oferta_id,\n    tipo_seleccion: resultado.tipo_seleccion,\n    valor_final: resultado.valor_final,\n    nombre_domiciliario: resultado.mejor_oferta.nombre_domiciliario,\n    numero_domiciliario: resultado.mejor_oferta.numero_domiciliario,\n    calificacion_domiciliario: resultado.mejor_oferta.calificacion_domiciliario\n  };\n} else {\n  // Cuando no hay ofertas válidas\n  return {\n    pedido_id: datos.pedido_id,\n    ventana_id: datos.ventana_id,\n    oferta_id: null,\n    tipo_seleccion: resultado.tipo_seleccion,\n    valor_final: null,\n    nombre_domiciliario: null,\n    numero_domiciliario: null,\n    calificacion_domiciliario: null\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        368
      ],
      "id": "14709fa2-69ef-489e-91ec-b372587c0d6a",
      "name": "Algoritmo Selección"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "ventanas_ofertas",
        "filters": {
          "conditions": [
            {
              "keyName": "ventana_id",
              "condition": "eq",
              "keyValue": "={{ $('Start').first().json.ventana_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "estado_ventana",
              "fieldValue": "cerrada"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1696,
        368
      ],
      "id": "bfa58698-ea38-49ef-80eb-f5f75df2ad0a",
      "name": "Cerrar Ventana Ofertas",
      "credentials": {
        "supabaseApi": {
          "id": "4bpjJPK2fqZkspgx",
          "name": "Supabase QA"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "ventana_id",
              "type": "any"
            },
            {
              "name": "pedido_id",
              "type": "any"
            },
            {
              "name": "valor_oferta",
              "type": "any"
            },
            {
              "name": "domiciliarios_notificados"
            },
            {
              "name": "phone_number_id_domiciliarios"
            },
            {
              "name": "version_whatsapp_api"
            },
            {
              "name": "tiempo_procesar_ofertas"
            }
          ]
        }
      },
      "id": "acf9643d-b73d-4ab2-8257-11b7c31bfa9e",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -2160,
        368
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "91812db6-2968-4ade-b76c-a1b9e8d7a8b2",
                    "leftValue": "={{ $('Algoritmo Selección').item.json.tipo_seleccion }}",
                    "rightValue": "aceptacion",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Aceptación"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2e9a93cb-0540-4951-88a2-9648cbc75f17",
                    "leftValue": "={{ $('Algoritmo Selección').item.json.tipo_seleccion }}",
                    "rightValue": "contraoferta",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Contraoferta"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "SinOfertas"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        528,
        368
      ],
      "id": "d92a5cd8-c237-4157-a20f-fa774ba7f3d6",
      "name": "Switch Resultado Ventana",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "pedidos",
        "filters": {
          "conditions": [
            {
              "keyName": "pedido_id",
              "condition": "eq",
              "keyValue": "={{ $('Algoritmo Selección').item.json.pedido_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "estado",
              "fieldValue": "Confirmado"
            },
            {
              "fieldId": "domiciliario_asignado",
              "fieldValue": "={{ $('Algoritmo Selección').item.json.numero_domiciliario }}"
            },
            {
              "fieldId": "valor_final",
              "fieldValue": "={{ $('Algoritmo Selección').item.json.valor_final }}"
            },
            {
              "fieldId": "fecha_confirmacion",
              "fieldValue": "={{ new Date(new Date().toLocaleString('sv-SE', { timeZone: 'America/Bogota' }) + 'Z').toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        960,
        192
      ],
      "id": "4ea6427c-0b9a-4733-a1bf-7886ba033958",
      "name": "Confirmar Pedido Automático",
      "executeOnce": false,
      "credentials": {
        "supabaseApi": {
          "id": "4bpjJPK2fqZkspgx",
          "name": "Supabase QA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Clasificar domiciliarios - VERSIÓN OPTIMIZADA\ntry {\n  console.log('=== INICIANDO CLASIFICACIÓN DOMICILIARIOS ===');\n  \n  // 1. Obtener resultado del algoritmo de selección\n  const resultadoVentana = $('Algoritmo Selección').first().json;\n  \n  // 2. Obtener ofertas recibidas del nodo anterior\n  const ofertasRecibidas = $('Buscar Ofertas Recibidas').all();\n  \n  // 3. Obtener domiciliarios notificados del Start (viene como string, convertir a array)\n  const startData = $('Start').first().json;\n  const domiciliariosNotificadosStr = startData.domiciliarios_notificados || '';\n  let domiciliariosNotificados = [];\n  \n  try {\n    domiciliariosNotificados = domiciliariosNotificadosStr.split(',').map(num => num.trim()).filter(num => num !== '');\n  } catch (parseError) {\n    console.log('Error parseando domiciliarios_notificados:', parseError.message);\n    domiciliariosNotificados = [];\n  }\n  \n  if (domiciliariosNotificados.length === 0) {\n    return {\n      clasificacion: { seleccionado: [], rechazados: [], no_participaron: [] },\n      tiene_ofertas: false,\n      stats: { total_domiciliarios: 0, participaron: 0, no_participaron: 0 },\n      error: 'No hay domiciliarios notificados'\n    };\n  }\n  \n  // Extraer datos del resultado\n  const tieneOfertas = resultadoVentana?.tipo_seleccion !== 'sin_ofertas';\n  const domiciliarioSeleccionado = resultadoVentana?.numero_domiciliario || null;\n  const pedidoId = resultadoVentana?.pedido_id || 'SIN_ID';\n  const ventanaId = resultadoVentana?.ventana_id || 'SIN_VENTANA';\n  \n  // Crear set de domiciliarios que ofertan\n  const domiciliariosQueOfertan = new Set();\n  \n  // Procesar ofertas recibidas para identificar quiénes participaron\n  ofertasRecibidas.forEach((ofertaWrapper, index) => {\n    try {\n      const oferta = ofertaWrapper?.json;\n      if (oferta && oferta.numero_domiciliario) {\n        domiciliariosQueOfertan.add(oferta.numero_domiciliario);\n      }\n    } catch (err) {\n      console.log(`Error procesando oferta ${index}:`, err.message);\n    }\n  });\n  \n  // Crear mapas para encontrar ofertas por domiciliario\n  const ofertasPorDomiciliario = new Map();\n  \n  // Mapear ofertas por número de domiciliario\n  ofertasRecibidas.forEach((ofertaWrapper) => {\n    try {\n      const oferta = ofertaWrapper?.json;\n      if (oferta && oferta.numero_domiciliario && oferta.oferta_id) {\n        ofertasPorDomiciliario.set(oferta.numero_domiciliario, oferta.oferta_id);\n      }\n    } catch (err) {\n      console.log(`Error mapeando oferta:`, err.message);\n    }\n  });\n  \n  // Arrays para clasificación simplificada\n  const rechazados = [];\n  const noParticiparon = [];\n  \n  // Procesar todos los domiciliarios notificados\n  domiciliariosNotificados.forEach((numeroDomiciliario) => {\n    try {\n      if (!numeroDomiciliario) {\n        return;\n      }\n      \n      // Saltar el domiciliario seleccionado\n      if (numeroDomiciliario === domiciliarioSeleccionado) {\n        return;\n      }\n      \n      if (domiciliariosQueOfertan.has(numeroDomiciliario)) {\n        // Participó pero no fue seleccionado - incluir número y oferta_id\n        const ofertaId = ofertasPorDomiciliario.get(numeroDomiciliario);\n        rechazados.push({\n          numero_domiciliario: numeroDomiciliario,\n          oferta_id: ofertaId || null\n        });\n      } else {\n        // No participó - solo el número\n        noParticiparon.push(numeroDomiciliario);\n      }\n    } catch (err) {\n      console.log(`Error procesando domiciliario:`, err.message);\n    }\n  });\n  \n  console.log('=== CLASIFICACIÓN COMPLETADA ===');\n  console.log('Rechazados:', rechazados.length);\n  console.log('No participaron:', noParticiparon.length);\n  \n  // Retornar resultado simplificado\n  return {\n    rechazados,\n    no_participaron: noParticiparon\n  };\n  \n} catch (error) {\n  console.error('ERROR EN CLASIFICAR DOMICILIARIOS:', error.message);\n  \n  return {\n    rechazados: [],\n    no_participaron: [],\n    error: error.message\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        368
      ],
      "id": "df551a5a-20f3-458f-8566-c66bf10a4129",
      "name": "Clasificar Domiciliarios"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "condicion-rechazados",
              "leftValue": "={{ $json.rechazados.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -288,
        16
      ],
      "id": "5b46c8dd-386b-451b-a5c1-f97e3a67e407",
      "name": "¿Hay Domiciliarios Rechazados?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "condicion-no-participaron",
              "leftValue": "={{ $json.no_participaron.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -288,
        192
      ],
      "id": "c72d08a4-fc4a-4db9-a4e9-af03c90747ce",
      "name": "¿Hay Domiciliarios No Participaron?",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// Script para procesar domiciliarios que no participaron\ntry {\n  console.log('=== PROCESANDO NO PARTICIPARON ===');\n  \n  // Obtener datos del nodo de clasificación anterior\n  const clasificacionData = $('Clasificar Domiciliarios').first().json;\n  const noParticiparon = clasificacionData.no_participaron || [];\n  \n  // Convertir cada número en un item separado\n  const items = noParticiparon.map((numeroDomiciliario) => {\n    console.log('Procesando no participó:', numeroDomiciliario);\n    \n    return {\n      numero_domiciliario: numeroDomiciliario\n    };\n  });\n  \n  console.log(`Total de items creados: ${items.length}`);\n  return items;\n  \n} catch (error) {\n  console.error('ERROR PROCESANDO NO PARTICIPARON:', error.message);\n  return [{\n    error: error.message,\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        176
      ],
      "id": "02cae1b0-6533-41a1-8b9b-8c01a861fe15",
      "name": "Set No Participaron"
    },
    {
      "parameters": {
        "jsCode": "// Procesar Domiciliarios Rechazados\ntry {\n  console.log('=== PROCESANDO DOMICILIARIOS RECHAZADOS ===');\n  \n  // Obtener datos del nodo anterior (Clasificar Domiciliarios)\n  const clasificacionData = $('Clasificar Domiciliarios').first().json;\n  const rechazados = clasificacionData?.rechazados || [];\n  \n  // Crear un item separado para cada domiciliario rechazado\n  const itemsRechazados = rechazados.map((rechazado) => {\n    return {\n      numero_domiciliario: rechazado.numero_domiciliario,\n      oferta_id: rechazado.oferta_id\n    };\n  });\n  \n  console.log(`Procesados ${itemsRechazados.length} domiciliarios rechazados`);\n  \n  return itemsRechazados;\n  \n} catch (error) {\n  console.error('ERROR PROCESANDO RECHAZADOS:', error.message);\n  return [{\n    error: error.message\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "6bf8569b-afc1-4e5c-8c73-5d2642997755",
      "name": "Set Rechazados"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98bb2cd9-43b3-430f-8c87-225a48f08080",
              "name": "resultado",
              "value": "Aceptado",
              "type": "string"
            },
            {
              "id": "f04745b7-7479-42b6-9ab5-dda691f6b272",
              "name": "Algoritmo_Seleccion",
              "value": "={{ $('Algoritmo Selección').first().json }}",
              "type": "object"
            },
            {
              "id": "3f04661d-96a3-4fd1-81d7-d2a3ae11d3dc",
              "name": "codigo_verificacion",
              "value": "={{ $('Confirmar Pedido Automático').first().json.codigo_verificacion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        192
      ],
      "id": "2a6b490c-b667-4fda-bea0-0aeaa8b5fc91",
      "name": "Return Aceptado",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "pedidos",
        "filters": {
          "conditions": [
            {
              "keyName": "pedido_id",
              "condition": "eq",
              "keyValue": "={{ $('Algoritmo Selección').item.json.pedido_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "estado",
              "fieldValue": "EsperandoConfirmacion"
            },
            {
              "fieldId": "domiciliario_asignado",
              "fieldValue": "={{ $('Algoritmo Selección').item.json.numero_domiciliario }}"
            },
            {
              "fieldId": "valor_final",
              "fieldValue": "={{ $('Algoritmo Selección').item.json.valor_final }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        960,
        384
      ],
      "id": "9cb9c132-5062-4271-9dd2-8fb69de393fe",
      "name": "Actualizar Estado Contraoferta",
      "credentials": {
        "supabaseApi": {
          "id": "4bpjJPK2fqZkspgx",
          "name": "Supabase QA"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98bb2cd9-43b3-430f-8c87-225a48f08080",
              "name": "resultado",
              "value": "Contraofertado",
              "type": "string"
            },
            {
              "id": "f04745b7-7479-42b6-9ab5-dda691f6b272",
              "name": "Algoritmo_Seleccion",
              "value": "={{ $('Algoritmo Selección').first().json }}",
              "type": "object"
            },
            {
              "id": "ca3eae6e-01e4-4b4a-a120-20ba66e1a775",
              "name": "codigo_verificacion",
              "value": "={{ $('Actualizar Estado Contraoferta').first().json.codigo_verificacion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        384
      ],
      "id": "d2daac3a-316b-48ca-9e4d-08085d5b085d",
      "name": "Return Contraofertado",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "pedidos",
        "filters": {
          "conditions": [
            {
              "keyName": "pedido_id",
              "condition": "eq",
              "keyValue": "={{ $('Algoritmo Selección').item.json.pedido_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "estado",
              "fieldValue": "Cancelado_SinOfertas"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        960,
        592
      ],
      "id": "c2532e24-3c86-46b4-b8d8-6767a2d7f725",
      "name": "Actualizar Estado Sin Ofertas",
      "credentials": {
        "supabaseApi": {
          "id": "4bpjJPK2fqZkspgx",
          "name": "Supabase QA"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98bb2cd9-43b3-430f-8c87-225a48f08080",
              "name": "resultado",
              "value": "Sin ofertas",
              "type": "string"
            },
            {
              "id": "c74784d6-a0e5-442d-8db6-87973fe382b1",
              "name": "valor_sugerido",
              "value": "={{ $json.valor_oferta * 1.3 }}",
              "type": "string"
            },
            {
              "id": "f04745b7-7479-42b6-9ab5-dda691f6b272",
              "name": "Algoritmo_Seleccion",
              "value": "={{ $('Algoritmo Selección').first().json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        592
      ],
      "id": "40675f20-e93e-4af7-9874-0b7b14016c0a",
      "name": "Return Sin Ofertas",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d1cea5b9-cfb7-40cf-81e4-ebe9ad3dc577",
              "leftValue": "={{ $json.rechazados.length + $json.no_participaron.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -576,
        368
      ],
      "id": "aedfcb39-25ec-4f03-bf79-b9520a07edbf",
      "name": "Notificar Otros Domiciliarios"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "768517399686178",
        "recipientPhoneNumber": "={{ $json.numero_domiciliario }}",
        "textBody": "=👀 RESULTADO PROPUESTA\n\n❌ Tu propuesta no fue seleccionada\n🆔 Pedido: {{ $('Algoritmo Selección').item.json.pedido_id }}\n\n🚚 Próximos pedidos en camino",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        256,
        0
      ],
      "id": "6e0bdda6-c505-4868-bd4c-534b14cc7aae",
      "name": "Notificar Domiciliario Rechazado",
      "webhookId": "7cd4d732-fcb9-4c57-8434-fc35c85b2cfd",
      "credentials": {
        "whatsAppApi": {
          "id": "YM1CDPaqIynCqebo",
          "name": "WhatsApp Domiciliarios QA - Sender"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "768517399686178",
        "recipientPhoneNumber": "={{ $json.numero_domiciliario }}",
        "textBody": "=⏰ VENTANA DE OFERTAS CERRADA\n\n🆔 Pedido: {{ $('Algoritmo Selección').item.json.pedido_id }}\n\n⚡ Mantente listo para ofertar ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        256,
        176
      ],
      "id": "64f26791-b034-4c8c-be0b-af9f2115ba3e",
      "name": "Notificar No Participaron",
      "webhookId": "7cd4d732-fcb9-4c57-8434-fc35c85b2cfd",
      "credentials": {
        "whatsAppApi": {
          "id": "YM1CDPaqIynCqebo",
          "name": "WhatsApp Domiciliarios QA - Sender"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/{{ $('Start').first().json.version_whatsapp_api }}/{{ $('Start').first().json.phone_number_id_domiciliarios }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"messaging_product\": \"whatsapp\",\n    \"recipient_type\": \"individual\",\n    \"to\": \"{{ $json.domiciliario_asignado }}\",\n    \"type\": \"interactive\",\n    \"interactive\": {\n        \"type\": \"button\",\n        \"header\": {\n            \"type\": \"text\",\n            \"text\": \"🎉 ¡PEDIDO ASIGNADO!\"\n        },\n        \"body\": {\n            \"text\": \"✅ Se aceptó tu propuesta\\n\\n🆔 Pedido: {{ $json.pedido_id }}\\n💰 Valor: ${{ $json.valor_final }}\\n📍 Dirección: {{ $json.direccion }}\\n🛒 Productos: {{ $json.lista_compras }}\\n📱 Cliente: {{ $json.nombre_usuario }}\\n📞 Teléfono: {{ $json.numero_usuario.replace(/^57/, '') }}\\n\\n🚚 ¡Puedes comenzar el domicilio!\\n⏰ Recuerda contactar al cliente\\n\\n⚠️ Al entregar: Pide código al cliente y presiona el botón\"\n        },\n        \"action\": {\n            \"buttons\": [\n                {\n                    \"type\": \"reply\",\n                    \"reply\": {\n                        \"id\": \"ENTREGAR-{{ $json.pedido_id }}\",\n                        \"title\": \"Entregar\"\n                    }\n                }\n            ]\n        }\n    }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        192
      ],
      "id": "c83c6237-2331-4793-a577-a030c26c69b5",
      "name": "Notificar Domiciliario Asignado",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "maxTries": 2,
      "credentials": {
        "httpBearerAuth": {
          "id": "5zpQFh3GmNApfzDH",
          "name": "Credenciales WhatsApp Domiciliarios QA"
        }
      }
    }
  ],
  "pinData": {
    "Start": [
      {
        "json": {
          "ventana_id": "VEN-88",
          "pedido_id": "88",
          "valor_oferta": "8000",
          "domiciliarios_notificados": "573204081631,573006064535",
          "phone_number_id_domiciliarios": "768517399686178",
          "version_whatsapp_api": "v22.0",
          "tiempo_procesar_ofertas": "60"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-10T02:35:56.504Z",
      "updatedAt": "2025-09-10T02:35:56.504Z",
      "role": "workflow:owner",
      "workflowId": "J7IDbKTkclpin309",
      "projectId": "0IzhKVOc0T9TvoCy"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-11T20:17:09.000Z",
  "versionId": "8fe43ae1-956b-4ed7-aca1-6d57ae5d2252"
}